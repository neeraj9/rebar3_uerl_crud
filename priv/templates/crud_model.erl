-module({{name}}_model).
-behaviour(trails_handler).
-behaviour(crud_callback).
-export([trails/0]). % define the API for docs
-export([init/0, terminate/1, % CRUD
         validate/2, create/3, read/2, update/3, delete/2]).
-export_type([{{name}}/0]).


%% example:
%% #{name := binary(),              % must be present
%%   age  => non_negative_integer() % optional
%%  }.
-type {{name}}() :: #{}.
-type state() :: nostate.

%%%%%%%%%%%%%%%%%%%%%%%
%%% API DEFINITIONS %%%
%%%%%%%%%%%%%%%%%%%%%%%
%% See: http://swagger.io/specification/
trails() ->
    Path = "/{{name}}/[:id]",
    Handler = {{name}}_handler,
    HandlerState = [?MODULE],
    Meta = Handler:paths("{{name}}"),
    [trails:trail(Path, Handler, HandlerState, Meta)].


%%%%%%%%%%%%%%%%%%%%%%
%%% CRUD callbacks %%%
%%%%%%%%%%%%%%%%%%%%%%

%% @doc Initialize the state that the handler will carry for
%% a specific request throughout its progression. The state
%% is then passed on to each subsequent call to this model.
-spec init() -> state().
init() ->
    nostate.

%% @doc At the end of a request, the state is passed back in
%% to allow for clean up.
-spec terminate(state()) -> term().
terminate(_State) ->
    ok.

%% @doc Return, via a boolean value, whether the user-submitted
%% data structure is considered to be valid by this model's standard.
-spec validate({{name}}() | term(), state()) -> {boolean(), state()}.
validate(Map, State) ->
    {is_map(Map), State}.

%% @doc Create a new entry. If the id is `undefined', the user
%% has not submitted an id under which to store the resource:
%% the id needs to be generated by the model, and (if successful),
%% returned via `{true, GeneratedId}'.
%% Otherwise, a given id will be passed, and a simple `true' or
%% `false' value may be returned to confirm the results.
%%
%% The created resource is validated before this function is called.
-spec create(crud_callback:id() | undefined, {{name}}(), state()) ->
        {false | true | {true, crud_callback:id()}, state()}.
create(undefined, Map, State) ->
    NewId = create_id(),
    { {memstore_proc:create(?MODULE, NewId, Map, State), NewId}, State};
create(Id, Map, State) ->
    {memstore_proc:create(?MODULE, Id, Map, State), State}.

%% @doc Read a given entry from the store based on its Id.
-spec read(crud_callback:id(), state()) ->
        { {ok, {{name}}()} | {error, not_found}, state()}.
read(Id, State) ->
    {memstore_proc:read(?MODULE, Id, State), State}.

%% @doc Update an existing resource.
%%
%% The modified resource is validated before this function is called.
-spec update(crud_callback:id(), {{name}}(), state()) -> {boolean(), state()}.
update(Id, Map, State) ->
    {memstore_proc:update(?MODULE, Id, Map, State), State}.

%% @doc Delete an existing resource.
-spec delete(crud_callback:id(), state()) -> {boolean(), state()}.
delete(Id, State) ->
    {memstore_proc:delete(?MODULE, Id, State), State}.

%%%%%%%%%%%%%%%
%%% PRIVATE %%%
%%%%%%%%%%%%%%%
-spec create_id() -> crud_callback:id().
create_id() ->
    list_to_binary(uuid:uuid_to_string(uuid:get_v4())).
